@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@using System.Net
@using System.Text.Json
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Login</h3>
@if (!awaitingTwoFactorCode)
{
    <EditForm Model="userLogin"  OnValidSubmit="HandleLogin" FormName="login-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="userLogin.Email" />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <InputText id="password" class="form-control" @bind-Value="userLogin.Password" type="password" />
        </div>
        <div class="form-group">
            <InputCheckbox @bind-Value="userLogin.RememberMe" />
            <label for="rememberMe">Remember me</label>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
    </EditForm>
}
else
{
    <EditForm Model="twoFactorCode" OnValidSubmit="HandleTwoFactorAuthentication" FormName="mfaForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="code">Enter your 2FA code:</label>
            <InputText id="code" class="form-control" @bind-Value="twoFactorCode.Code" />
        </div>
        <button type="submit" class="btn btn-primary">Verify Code</button>
    </EditForm>
}


@if (loginResult != null)
{
    <p class="@loginResultCssClass">@loginResult</p>
}

@code {
    [SupplyParameterFromForm]
    private UserLogin? userLogin { get; set; }

    [SupplyParameterFromForm]
    private TwoFactorVerification? twoFactorCode { get; set; }


    private bool awaitingTwoFactorCode = false;
    private string loginResult;
    private string loginResultCssClass;
    private int clientTimeZoneOffset;

    protected override async Task OnInitializedAsync()
    {
        userLogin ??= new();
        twoFactorCode ??= new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            awaitingTwoFactorCode = await LocalStorage.GetItemAsync<bool>("awaitingTwoFactorCode");
            if (awaitingTwoFactorCode)
            {
                twoFactorCode.Email = await LocalStorage.GetItemAsync<string>("userEmailFor2FA");
            }
        }
        clientTimeZoneOffset = await JSRuntime.InvokeAsync<int>("getTimeZoneOffset");
    }

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("api/login", userLogin);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadFromJsonAsync<LoginResponse>();

            if (responseContent?.Message?.Contains("Please verify") == true)
            {
                awaitingTwoFactorCode = true;
                loginResult = responseContent.Message ?? "Two-factor authentication required.";
                loginResultCssClass = "text-warning";
            }
            else
            {
                await ProcessSuccessfulLogin(responseContent.Token);
            }
        }
        else
        {
            await HandleErrorResponse(response);
        }
    }

    private async Task ProcessSuccessfulLogin(string token)
    {
        await LocalStorage.SetItemAsync("authToken", token);  // Store the JWT in local storage
        var authProvider = AuthenticationStateProvider as ApiAuthenticationStateProvider;
        if (authProvider != null)
        {
            await authProvider.MarkUserAsAuthenticated(token);
        }
        NavigationManager.NavigateTo("/", true);  // Navigate to home page upon successful login
    }

    private async Task HandleErrorResponse(HttpResponseMessage response)
    {
        var responseContent = await response.Content.ReadAsStringAsync();
        LoginResponse loginResponse = null;

        if (IsJson(responseContent))
        {
            try
            {
                loginResponse = JsonSerializer.Deserialize<LoginResponse>(responseContent);
            }
            catch (JsonException ex)
            {
                Console.WriteLine($"JSON Deserialization Error: {ex.Message}");
            }
        }

        switch (response.StatusCode)
        {
            case System.Net.HttpStatusCode.Forbidden:
                loginResult = "Two-factor authentication required.";
                loginResultCssClass = "text-warning";
                break;
            case System.Net.HttpStatusCode.Locked:
                loginResult = "Account is locked. Please try again later.";
                loginResultCssClass = "text-danger";
                break;
            case System.Net.HttpStatusCode.Unauthorized:
                loginResult = "Login not allowed. Ensure the login is correct and account is verified.";
                loginResultCssClass = "text-danger";
                break;
            case (HttpStatusCode)429:
                var rateLimitInfo = JsonSerializer.Deserialize<RateLimitInfo>(responseContent);
                loginResult = $"{rateLimitInfo.Message} Please try again after {rateLimitInfo.BanEndTime}.";
                loginResultCssClass = "text-danger";
                break;
            default:
                loginResult = loginResponse?.Message ?? "Invalid login attempt.";
                loginResultCssClass = "text-danger";
                break;
        }
    }

    private async Task HandleRateLimitResponse(string responseContent)
    {
        var rateLimitInfo = DeserializeRateLimitInfo(responseContent);
        if (rateLimitInfo != null && DateTime.TryParse(rateLimitInfo.BanEndTime, out DateTime banEndTime))
        {
            // Adjust ban end time based on client's timezone offset
            var adjustedBanEndTime = banEndTime.AddMinutes(-clientTimeZoneOffset);
            var remainingTime = adjustedBanEndTime - DateTime.UtcNow;
            var formattedTime = $"{remainingTime.Hours}h {remainingTime.Minutes}m {remainingTime.Seconds}s";

            loginResult = $"{rateLimitInfo.Message} Please try again in {formattedTime}.";
            loginResultCssClass = "text-danger";
        }
        else
        {
            loginResult = "Error parsing rate limit information.";
            loginResultCssClass = "text-danger";
        }
    }

    private RateLimitInfo DeserializeRateLimitInfo(string responseContent)
    {
        try
        {
            using (JsonDocument doc = JsonDocument.Parse(responseContent))
            {
                JsonElement root = doc.RootElement;
                string message = root.GetProperty("message").GetString();
                string banEndTime = root.GetProperty("banEndTime").GetString();
                return new RateLimitInfo { Message = message, BanEndTime = banEndTime };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deserializing JSON: {ex.Message}");
            return null;
        }
    }

    private async Task HandleTwoFactorAuthentication()
    {
        twoFactorCode.RememberClient = false;
        twoFactorCode.Email = userLogin.Email.Trim('"', '\'');

        // Include client time zone offset in the request
        var requestUri = $"api/login/verify-2fa?offset={clientTimeZoneOffset}";

        var request = new HttpRequestMessage(HttpMethod.Post, requestUri)
            {
                Content = JsonContent.Create(twoFactorCode)
            };

        var response = await Http.SendAsync(request);
        var responseContent = await response.Content.ReadAsStringAsync();

        switch (response.StatusCode)
        {
            case HttpStatusCode.OK:
                await Clear2FAState();
                await ProcessSuccessfulLogin(responseContent);
                loginResult = "2FA Verification successful, logged in.";
                loginResultCssClass = "text-success";
                break;
            case HttpStatusCode.BadRequest:
                loginResult = "Invalid 2FA code.";
                loginResultCssClass = "text-danger";
                break;
            case HttpStatusCode.Unauthorized:
                loginResult = "Login not allowed. Ensure the account has necessary permissions and is verified.";
                loginResultCssClass = "text-danger";
                break;
            case (HttpStatusCode)423:
                var lockoutInfo = JsonSerializer.Deserialize<LockoutInfo>(responseContent);
                loginResult = $"{lockoutInfo.Message} Lockout ends at {lockoutInfo.LockoutEndTime}.";
                loginResultCssClass = "text-danger";
                break;
            case (HttpStatusCode)429:
                await HandleRateLimitResponse(responseContent);
                break;
            default:
                loginResult = "An error occurred during 2FA verification.";
                loginResultCssClass = "text-danger";
                break;
        }
    }

    private class LockoutInfo
    {
        public string Message { get; set; }
        public string LockoutEndTime { get; set; }
    }

    private class RateLimitInfo
    {
        public string Message { get; set; }
        public string BanEndTime { get; set; }
    }


    private async Task Clear2FAState()
    {
        await LocalStorage.RemoveItemAsync("awaitingTwoFactorCode");
        await LocalStorage.RemoveItemAsync("userEmailFor2FA");
    }

    public class UserLogin
    {
        public string Email { get; set; }
        public string Password { get; set; }
        public bool RememberMe { get; set; }
    }

    public class TwoFactorVerification
    {
        public string Email { get; set; }
        public string Code { get; set; }
        public bool RememberClient { get; set; }
    }

    public class LoginResponse
    {
        public string Message { get; set; }
        public string Token { get; set; }
    }
    private bool IsJson(string content)
    {
        content = content.Trim();
        return (content.StartsWith("{") && content.EndsWith("}")) || (content.StartsWith("[") && content.EndsWith("]"));
    }
}
