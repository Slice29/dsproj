@page "/admin"
@using BlazorUI.Models
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<h3>Admin Page</h3>

<EditForm Model="@userSearch" OnValidSubmit="@GetUserWithRoles">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">User Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@userSearch.Email" />
        <button type="submit" class="btn btn-primary">Search User</button>
    </div>
</EditForm>

@if (userFound)
{
    <UserDetails User="user" Roles="userRoles" />
}
else if (notFound)
{
    <p>User not found.</p>
}
@code {
    private UserSearch userSearch = new UserSearch();
    private string userEmail = "";
    private UserDto user;
    private List<string> userRoles = new List<string>();
    private bool userFound = false;
    private bool notFound = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
    }

    protected async Task GetUserWithRoles()
    {
        user = null;
        userRoles.Clear();
        notFound = false;
        userFound = false;

        var userResponse = await Http.GetFromJsonAsync<UserDto>($"api/admin/{userSearch.Email}");
        if (userResponse == null)
        {
            notFound = true;
            return;
        }

        user = userResponse;
        userFound = true;

        var rolesResponse = await Http.GetFromJsonAsync<List<string>>($"api/admin/{userSearch.Email}/roles");
        if (rolesResponse != null)
        {
            userRoles = rolesResponse;
        }
    }

}
