@page "/admin"
@using BlazorUI.Models
@using Blazored.Toast.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject ILocalStorageService LocalStorage
@attribute [Authorize(Policy = "AdminOnly")]

<h3>Admin Page</h3>

<EditForm Model="@userSearch" OnValidSubmit="@GetUserWithRoles">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">User Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@userSearch.Email" />
        <button type="submit" class="btn btn-primary">Search User</button>
    </div>
</EditForm>

@if (userFound)
{
    <UserDetails User="user" Roles="userRoles" />
}
else if (notFound)
{
    <p>User not found.</p>
}

@code {
    private UserSearch userSearch = new UserSearch();
    private UserDto user;
    private List<string> userRoles = new List<string>();
    private bool userFound = false;
    private bool notFound = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            ToastService.ShowError("You are not authorized to view this page.");
            NavigationManager.NavigateTo("/login");
        }
    }

    protected async Task GetUserWithRoles()
    {
        user = null;
        userRoles.Clear();
        notFound = false;
        userFound = false;

        // Retrieve the JWT token from local storage
        var token = await LocalStorage.GetItemAsStringAsync("authToken");
        if (string.IsNullOrEmpty(token))
        {
            ToastService.ShowError("Token not found. Please login again.");
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Create the HTTP request and add the Authorization header
        var userRequest = new HttpRequestMessage(HttpMethod.Get, $"api/admin/{userSearch.Email}");
        userRequest.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var userResponse = await Http.SendAsync(userRequest);
        if (userResponse.IsSuccessStatusCode)
        {
            user = await userResponse.Content.ReadFromJsonAsync<UserDto>();
            userFound = true;
        }
        else
        {
            notFound = true;
            return;
        }

        // Create the HTTP request for roles and add the Authorization header
        var rolesRequest = new HttpRequestMessage(HttpMethod.Get, $"api/admin/{userSearch.Email}/roles");
        rolesRequest.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var rolesResponse = await Http.SendAsync(rolesRequest);
        if (rolesResponse.IsSuccessStatusCode)
        {
            userRoles = await rolesResponse.Content.ReadFromJsonAsync<List<string>>();
        }
    }
}
