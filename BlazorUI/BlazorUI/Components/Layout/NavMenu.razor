@using BlazorUI.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject HttpClient Http

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <AuthorizeView>
            <Authorized>
                <!-- Navigation items for authorized users -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="test">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Test
                    </NavLink>
                </div>
                @if (isAdmin)
                {
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="/admin">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Admin Interface
                        </NavLink>
                    </div>
                    <div class="nav-item px-3">
                        <NavLink class="nav-link" href="/placeholder">
                            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Secret
                        </NavLink>
                    </div>
                }
                <div class="nav-item px-3">
                    <button class="nav-link btn btn-link" @onclick="Logout">
                        <span class="bi bi-box-arrow-right" aria-hidden="true"></span> Logout
                    </button>
                </div>
            </Authorized>
            <NotAuthorized>
                <!-- Navigation items for unauthorized users -->
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="login">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="register">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="azure-login">
                        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Login with Azure AD
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private bool isAdmin;
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (AuthenticationStateProvider is ApiAuthenticationStateProvider authProvider)
            {
                isAdmin = await authProvider.IsUserAdminAsync();
                StateHasChanged(); // Request a re-render
            }
        }
    }

    private async Task Clear2FAState()
    {
        await LocalStorage.RemoveItemAsync("awaitingTwoFactorCode");
        await LocalStorage.RemoveItemAsync("userEmailFor2FA");
    }

    private async Task Logout()
    {
        var userLogin = new UserSearch();
        if (await LocalStorage.GetItemAsStringAsync("userEmailFor2FA") is not null)
        {
            userLogin.Email = (await LocalStorage.GetItemAsStringAsync("userEmailFor2FA")).Trim('"', '\'');
            var response = await Http.PostAsJsonAsync("api/login/logout", userLogin);
        }

        await Clear2FAState();
        if (AuthenticationStateProvider is ApiAuthenticationStateProvider authProvider)
        {
            await authProvider.MarkUserAsLoggedOut();
        }
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }
}
